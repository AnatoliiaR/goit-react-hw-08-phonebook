{"version":3,"file":"static/js/605.6648e212.chunk.js","mappings":"0OACA,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA4F,yB,8BCI5F,EALqB,CACnBA,MAAO,GACPC,SAAU,ICeZ,EAjBe,CACbD,MAAO,CACLE,KAAM,QACNC,KAAM,QACNC,UAAU,EACVC,MAAO,aACPC,aAAc,cAEhBL,SAAU,CACRC,KAAM,WACNC,KAAM,WACNC,UAAU,EACVC,MAAO,gBACPC,aAAc,kB,SCyBlB,EA9BkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDC,aAAAA,EACAF,SAAAA,IAFMG,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAIrBZ,EAAoBU,EAApBV,MAAOC,EAAaS,EAAbT,SAEf,OACE,gBAAKY,UAAWC,EAAhB,UACE,kBAAMP,SAAUK,EAAcC,UAAWC,EAAzC,WACE,SAACC,EAAA,GAAD,gBACEC,MAAOhB,EACPW,aAAcA,GACVM,EAAAA,OAHN,IAIEJ,UAAWC,EACXI,YAAY,8BAEd,SAACH,EAAA,GAAD,gBACEC,MAAOf,EACPU,aAAcA,GACVM,EAAAA,UAHN,IAIEJ,UAAWC,EACXI,YAAY,oBAEd,SAACC,EAAA,EAAD,wBAIP,ECnCD,GAAgB,KAAO,wBAAwB,MAAQ,0BC0BvD,EApBkB,WAChB,IAAMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IACtBC,GAAWC,EAAAA,EAAAA,MAMjB,OAAIJ,GACK,SAAC,KAAD,CAAUK,GAAG,eAIpB,iBAAKZ,UAAWC,EAAAA,KAAhB,WACE,eAAID,UAAWC,EAAAA,MAAf,yBACA,SAAC,EAAD,CAAWP,SAXK,SAAAmB,GAClBH,GAASI,EAAAA,EAAAA,IAAMD,GAChB,EASqCb,UAAWC,EAAAA,SAGlD,C,mECDD,IAtBgB,SAAC,GAAgC,IAA9BL,EAA6B,EAA7BA,aAAcF,EAAe,EAAfA,SAC/B,GAA0BqB,EAAAA,EAAAA,WAAS,UAAKnB,IAAxC,eAAOC,EAAP,KAAcmB,EAAd,KAEMlB,GAAemB,EAAAA,EAAAA,cACnB,YAAiB,IAAdC,EAAa,EAAbA,OACO5B,EAAgB4B,EAAhB5B,KAAMa,EAAUe,EAAVf,MACda,GAAS,SAAAG,GACP,OAAO,kBAAKA,GAAZ,cAAwB7B,EAAOa,GAChC,GACF,GACD,CAACa,IASH,MAAO,CAAEnB,MAAAA,EAAOmB,SAAAA,EAAUlB,aAAAA,EAAcC,aANnB,SAAAqB,GACnBA,EAAEC,iBACF3B,GAAS,UAAKG,IACdmB,GAAS,UAAKpB,GACf,EAGF,C,uDCrBD,MAAyB,uB,SCSzB,EARe,SAAC,GAAmC,IAAjC0B,EAAgC,EAAhCA,SAAgC,IAAtBjC,KAAAA,OAAsB,MAAf,SAAe,EAChD,OACE,mBAAQA,KAAMA,EAAMW,UAAWC,EAA/B,SACGqB,GAGN,C,qECPc,SAASC,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IACIE,EAAKC,EADLT,ECHS,SAAuCM,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IAEIE,EAAKC,EAFLT,EAAS,CAAC,EACVU,EAAaC,OAAOC,KAAKN,GAG7B,IAAKG,EAAI,EAAGA,EAAIC,EAAWG,OAAQJ,IACjCD,EAAME,EAAWD,GACbF,EAASO,QAAQN,IAAQ,IAC7BR,EAAOQ,GAAOF,EAAOE,IAGvB,OAAOR,CACT,CDVe,CAA6BM,EAAQC,GAGlD,GAAII,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBT,GAEpD,IAAKG,EAAI,EAAGA,EAAIO,EAAiBH,OAAQJ,IACvCD,EAAMQ,EAAiBP,GACnBF,EAASO,QAAQN,IAAQ,GACxBG,OAAOM,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDR,EAAOQ,GAAOF,EAAOE,GAEzB,CAEA,OAAOR,CACT,CEjBA,MAA0B,2BAA1B,EAA6D,yB,wDCe7D,EAZkB,SAAC,GAAuC,IAArC1B,EAAoC,EAApCA,MAAOM,EAA6B,EAA7BA,aAAiBwC,EAAY,OACjDC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACnC,OACE,iBAAKzC,UAAWC,EAAhB,WACE,kBAAOyC,QAASH,EAAIvC,UAAWC,EAA/B,SACGT,KAEH,0BAAO+C,GAAIA,EAAII,SAAU7C,GAAkBwC,MAGhD,C,wDCbM,IAkBIG,EAAS,eAACG,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/initialState.js","components/LoginForm/fields.js","components/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.jsx","services/hooks/useForm.js","webpack://react-homework-template/./src/shared/Button/Button.module.css?f024","shared/Button/Button.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://react-homework-template/./src/shared/TextField/TextField.module.css?2962","shared/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"section\":\"LoginForm_section__2j8sS\",\"input\":\"LoginForm_input__aQRtt\"};","const initialState = {\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","const fields = {\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'User email',\n    placerholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'User password',\n    placerholder: 'User password',\n  },\n};\n\nexport default fields;\n","import style from '../LoginForm/LoginForm.module.css';\nimport useForm from '../../services/hooks/useForm';\nimport TextField from 'shared/TextField/TextField';\nimport Button from 'shared/Button/Button';\n\nimport initialState from './initialState';\nimport fields from './fields';\n\nconst LoginForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { email, password } = state;\n\n  return (\n    <div className={style.section}>\n      <form onSubmit={handleSubmit} className={style.form}>\n        <TextField\n          value={email}\n          handleChange={handleChange}\n          {...fields.email}\n          className={style.input}\n          placeholder=\"example: info@email.com\"\n        />\n        <TextField\n          value={password}\n          handleChange={handleChange}\n          {...fields.password}\n          className={style.input}\n          placeholder=\"Your password\"\n        />\n        <Button>Login</Button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"LoginPage_page__SchHS\",\"title\":\"LoginPage_title__RBt-o\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { login } from '../../redux/auth/auth-operations';\nimport { isUserLogin } from '../../redux/auth/auth-selector';\nimport { Navigate } from 'react-router-dom';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport style from './LoginPage.module.css';\n\nconst LoginPage = () => {\n  const isLogin = useSelector(isUserLogin);\n  const dispatch = useDispatch();\n\n  const handleLogin = data => {\n    dispatch(login(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n\n  return (\n    <div className={style.page}>\n      <h1 className={style.title}>Login Page</h1>\n      <LoginForm onSubmit={handleLogin} className={style.form} />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import { useState, useCallback } from 'react';\n\nconst UseForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default UseForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__M6Ua0\"};","import style from '../Button/Button.module.css';\n\nconst Button = ({ children, type = 'submit' }) => {\n  return (\n    <button type={type} className={style.button}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"TextField_wrapper__KbUll\",\"label\":\"TextField_label__txZxW\"};","import style from './TextField.module.css';\nimport { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nconst TextField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <div className={style.wrapper}>\n      <label htmlFor={id} className={style.label}>\n        {label}\n      </label>\n      <input id={id} onChange={handleChange} {...props} />\n    </div>\n  );\n};\n\nexport default TextField;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["email","password","type","name","required","label","placerholder","onSubmit","useForm","initialState","state","handleChange","handleSubmit","className","style","TextField","value","fields","placeholder","Button","isLogin","useSelector","isUserLogin","dispatch","useDispatch","to","data","login","useState","setState","useCallback","target","prevState","e","preventDefault","children","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","props","id","useMemo","nanoid","htmlFor","onChange","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}